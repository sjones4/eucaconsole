#!/bin/sh
#
# Copyright 2012-2016 Hewlett Packard Enterprise Development LP
#
# Redistribution and use of this software in source and binary forms, with or
# without modification, are permitted provided that the following conditions
# are met:
#
#   Redistributions of source code must retain the above
#   copyright notice, this list of conditions and the
#   following disclaimer.
#
#   Redistributions in binary form must reproduce the above
#   copyright notice, this list of conditions and the
#   following disclaimer in the documentation and/or other
#   materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

### BEGIN INIT INFO
# Provides:          eucaconsole
# Required-Start:    $network $remote_fs
# Required-Stop:     $network $remote_fs
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Eucalyptus Console Server
# Description:       Eucalyptus Console Server
### END INIT INFO

. /etc/rc.d/init.d/functions

[ -f /etc/sysconfig/eucaconsole ] && . /etc/sysconfig/eucaconsole

SERVICE=eucaconsole
PROCESS=eucaconsole
LOGFILE=/var/log/eucaconsole_startup.log
PIDFILE=/var/run/eucaconsole/eucaconsole.pid
NGINXPIDFILE=$(grep nginx.pid /etc/eucaconsole/nginx.conf | awk {'print $2'} | sed s'/\;//')
MEMCACHEDPIDFILE=/var/run/eucaconsole/memcached.pid
CONSOLEUSER=eucaconsole

LOCKFILE=/var/lock/subsys/eucaconsole

# memcached defaults
MEMCACHED_MAXCONN=1024
MEMCACHED_CACHESIZE=64
MEMCACHED_FLAGS=""

if [ -f /etc/eucaconsole/memcached ];then
        . /etc/eucaconsole/memcached
fi

start() {
    if [ "x${GENERATE_CERT}" != "xNO" ]; then
        generate_cert
    fi

    if ! [ -f /etc/eucaconsole/session-keys.ini ]; then
        generate_cookie_secrets
    fi    

    if [ "x$NGINX_FLAGS" != xNO ]; then
        echo -n "Starting eucaconsole nginx: "
        daemon /usr/sbin/nginx -c /etc/eucaconsole/nginx.conf $NGINX_FLAGS
        [ $? -eq 0 ] && touch /var/lock/subsys/eucaconsole-nginx
        echo
    fi

    if [ "x$MEMCACHED_FLAGS" != xNO ]; then
        echo -n "Starting eucaconsole memcached: "
        daemon --user=$CONSOLEUSER --pidfile ${MEMCACHEDPIDFILE} memcached -d -p $PORT -u $CONSOLEUSER  -m $MEMCACHED_CACHESIZE -c $MEMCACHED_MAXCONN -P ${MEMCACHEDPIDFILE} $MEMCACHED_FLAGS
        [ $? -eq 0 ] && touch /var/lock/subsys/eucaconsole-memcached
        echo
    fi

    echo -n $"Starting $SERVICE: "
    daemon --user=$CONSOLEUSER --pidfile=$PIDFILE $PROCESS -d -p $PIDFILE -l $LOGFILE
    RETVAL=$?
    echo
    [ $RETVAL -eq 0 ] && touch $LOCKFILE
    return $RETVAL
}

stop() {
    if [ "x$NGINX_FLAGS" != xNO ]; then
        echo -n "Stopping eucaconsole nginx: "
        killproc -p $NGINXPIDFILE /usr/sbin/nginx SIGQUIT
        [ $? -eq 0 ] && rm /var/lock/subsys/eucaconsole-nginx
    fi
    echo
    if [ "x$MEMCACHED_FLAGS" != xNO ]; then
        echo -n "Stopping eucaconsole memcached: "
        killproc -p ${MEMCACHEDPIDFILE} /usr/bin/memcached
        RETVAL=$?
        if [ $RETVAL -eq 0 ] ; then
            rm -f /var/lock/subsys/eucaconsole-memcached ${MEMCACHEDPIDFILE}
        fi
        echo
    fi
    echo -n $"Stopping $SERVICE: "
    killproc -p $PIDFILE $PROCESS
    RETVAL=$?
    echo
    [ $RETVAL -eq 0 ] && rm -f $LOCKFILE
}

restart() {
    stop
    start
}

condrestart() {
    if [ -e $LOCKFILE ] ; then
        restart
        RETVAL=$?
        return $RETVAL
    fi
    RETVAL=0
    return $RETVAL
}

generate_cookie_secrets(){
    echo -n $"Generating cookie secrets: "
    KEY_FILE=/etc/eucaconsole/session-keys.ini
    touch $KEY_FILE
    chown root:eucaconsole $KEY_FILE
    chmod 640 $KEY_FILE
    cat > $KEY_FILE << _EOF_
[general]
session.encrypt_key = $(dd if=/dev/urandom bs=24 count=1 status=none | base64 | tr -d '/+=')
session.validate_key = $(dd if=/dev/urandom bs=24 count=1 status=none | base64 | tr -d '/+=')
_EOF_
    if [ $? -ne 0 ]; then
        rm -f $KEY_FILE
        failure $"Generating cookie secrets: "
        echo
        exit 1
    fi
    success $"Generating cookie secrets: "
    echo
}

generate_cert() {
    local key=/etc/pki/tls/private/eucaconsole.key
    local cert=/etc/pki/tls/certs/eucaconsole.crt

    if [ -f $key ] && [ -f $cert ]; then
        return 1
    fi

    echo -n $"Generating self-signed certificate: "
    rm -f $key $cert

    local csr=`mktemp`
    local cn=

    if nslookup `hostname` &>/dev/null; then
        cn=$(nslookup `hostname` 2>&1 | tail -3 | grep Name | sed -e 's@^Name:\s*@@')
    else
        cn=`hostname`
    fi

    local country=US
    local state=CA
    local location="Santa Barbara"
    local org="Eucalyptus Systems, Inc."
    local unit="Eucalyptus User Console"

    if ! openssl genpkey -algorithm rsa -pkeyopt rsa_keygen_bits:2048 -out $key &>/dev/null; then
        rm -f $csr
        failure $"Generating RSA key"
        echo
        exit 1
    fi

    openssl req -new -key $key -sha512 -out $csr &>/dev/null <<EOF
$country
$state
$location
$org
$unit
$cn
$USER@$cn


EOF

    if [ $? -ne 0 ]; then
        rm -f $key $csr
        failure $"Generating certificate request"
        echo
        exit 1
    fi

    if ! openssl x509 -req -in $csr -signkey $key -days 365 -sha512 -out $cert &>/dev/null; then
        rm -f $key $csr
        failure $"Generating certificate"
        echo
        exit 1
    fi

    rm -f $csr

    chmod 600 $cert
    chown $CONSOLEUSER:$CONSOLEUSER $cert

    chmod 600 $key
    chown $CONSOLEUSER:$CONSOLEUSER $key

    success $"Generating certificate"
    echo
}


# See how we were called.
case "$1" in
    start)
        start
        RETVAL=$?
        ;;
    stop)
        stop
        RETVAL=$?
        ;;
    status)
        status -p $PIDFILE $PROCESS
        RETVAL=$?
        ;;
    restart)
        restart
        RETVAL=$?
        ;;
    condrestart)
        condrestart
        RETVAL=$?
        ;;
    *)
        echo $"Usage: $0 {start|stop|restart|condrestart|status}"
        RETVAL=2
esac
exit $RETVAL


